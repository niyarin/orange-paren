(include "./simple-server/lib-simple-server.scm")
(include "./repl-eval.scm")

(import (scheme base) (scheme write) (scheme read) (scheme eval) (scheme process-context)
        (srfi 18) (srfi 106)
        (prefix (orange-paren repl-eval) orepl-eval/) (lib-simple-server))

(define (make-nrepl-listener repl-env)
  (lambda (input-port output-port)
    (let loop ()
             (let ((obj (read input-port)))
               (unless (eof-object? obj)
                  (let ((res (orepl-eval/eval! obj repl-env)))
                    (display res output-port)(newline output-port)
                    (write-char (integer->char 4) output-port)
                    (flush-output-port output-port)
                    (loop)))))))

(define (my-repl repl-env)
  (let loop ()
    (display ">")(flush-output-port)
    (let ((input (read)))
      (if (eof-object? input)
        (exit 0)
        (begin
          (display (orepl-eval/eval! input repl-env))(newline)
          (flush-output-port)
          (loop))))))

(define (my-repl-start env)
  (thread-start! (make-thread (lambda () (my-repl env)))))

(let* ((repl-env (orepl-eval/make-default-env))
       (listener (make-nrepl-listener repl-env))
       (my-server (make-simple-server listener "0")))
  (display "start nrepl ...")(newline)
  (display "soclet:")(display (ref-server-socket my-server))(newline)
  (my-repl-start repl-env)
  (simple-server-start my-server))
